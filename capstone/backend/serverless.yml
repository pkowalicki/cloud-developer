service:
  name: serverless-udagram-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  # - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  # - serverless-dynamodb-local
  # - serverless-offline

# Uncomment to enable individual packaging
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    GROUPS_ID_INDEX: Groups-IdIndex-${self:provider.stage}
    GROUPS_PUBLIC_INDEX: Groups-PublicIndex-${self:provider.stage}

    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: Images-IdIndex-${self:provider.stage}

    EMAILS_TABLE: Emails-${self:provider.stage}
    EMAILS_INDEX: Emails-Index-${self:provider.stage}

    CONNECTIONS_TABLE: Connections-${self:provider.stage}

    IMAGES_S3_BUCKET: serverless-udagram-images-pkowalic-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-pkowalic-${self:provider.stage}

    EMAIL: udacitypkowalic@gmail.com

    TOPIC: ${self:custom.topicName}
    # AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    # AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Scan
    #     - dynamodb:PutItem
    #     - dynamodb:GetItem
    #     - dynamodb:Query
    #     - dynamodb:UpdateItem
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Scan
    #     - dynamodb:GetItem
    #     - dynamodb:PutItem
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_PUBLIC_INDEX}
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #     - s3:GetObject
    #   Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #   Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Scan
    #     - dynamodb:PutItem
    #     - dynamodb:DeleteItem
    #   Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    # - Effect: Allow
    #   Action:
    #     - dynamodb:PutItem
    #     - dynamodb:Query
    #     - dynamodb:DeleteItem
    #   Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMAILS_TABLE}
    # - Effect: Allow
    #   Action:
    #     - SNS:CreateTopic
    #     - SNS:Publish
    #     - SNS:GetTopicAttributes
    #   Resource: arn:aws:sns:${opt:region, self:provider.region}:*:${self:provider.environment.TOPIC}
    # - Effect: Allow
    #   Action:
    #     - ses:SendEmail
    #     - ses:SendRawEmail
    #   Resource: arn:aws:ses:${opt:region, self:provider.region}:*:identity/*
    # - Effect: Allow
    #   Action:
    #     - ses:ListVerifiedEmailAddresses
    #     - ses:VerifyEmailIdentity
    #     - ses:DeleteIdentity
    #   Resource:
    #     - '*'
    # - Effect: Allow
    #   Action:
    #     - secretsmanager:GetSecretValue
    #   Resource: !Ref Auth0Secret
    # - Effect: Allow
    #   Action:
    #     - kms:Decrypt
    #   Resource: !GetAtt KMSKey.Arn

custom:
  topicName: GroupUpdateTopic-${self:provider.stage}

  # serverless-offline:
  #   port: 3003

  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-group-request.json)}
      - name: GroupUpdateRequest
        contentType: application/json
        schema: ${file(models/update-group-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}
      - name: RegisterEmailRequest
        contentType: application/json
        schema: ${file(models/register-email-request.json)}

functions:

  RS256Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler


  GetGroups:
    handler: src/lambda/http/getGroups.handler
    events:
      - http:
          method: get
          path: groups
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_PUBLIC_INDEX}
      

  GetGroup:
    handler: src/lambda/http/getGroup.handler
    events:
      - http:
          method: get
          path: groups/{groupId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}


  CreateGroup:
    handler: src/lambda/http/createGroup.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              'application/json': GroupRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}
      - Effect: Allow
        Action:
          - SNS:CreateTopic
          - SNS:Publish
          - SNS:GetTopicAttributes
        Resource: arn:aws:sns:${opt:region, self:provider.region}:*:${self:provider.environment.TOPIC}
    # deploymentSettings:
    #   type: Linear10PercentEvery1Minute
    #   alias: Live


  UpdateGroup:
    handler: src/lambda/http/updateGroup.handler
    events:
      - http:
          method: put
          path: groups/{groupId}
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a group
            description: Update a group
            requestModels:
              'application/json': GroupUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}
      - Effect: Allow
        Action:
          - SNS:CreateTopic
          - SNS:Publish
          - SNS:GetTopicAttributes
        Resource: arn:aws:sns:${opt:region, self:provider.region}:*:${self:provider.environment.TOPIC}


  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}


  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          authorizer: RS256Auth
          path: groups/{groupId}/images
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image
            description: Create a new image
            requestModels:
              'application/json': ImageRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}/index/${self:provider.environment.GROUPS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*


  Notifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/sns/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:Invoke
          - execute-api:ManageConnections
        Resource: arn:aws:execute-api:${opt:region, self:provider.region}:*:*


  EmailNotifications:
    handler: src/lambda/sns/sendEmailNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: arn:aws:ses:${opt:region, self:provider.region}:*:identity/*
      - Effect: Allow
        Action:
          - ses:ListVerifiedEmailAddresses
        Resource:
          - '*'


  RegisterEmail:
    handler: src/lambda/http/registerEmail.handler
    events:
      - http:
          method: post
          path: emails
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Register new email
            description: Register new Email
            requestModels:
              'application/json': RegisterEmailRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:VerifyEmailIdentity
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMAILS_TABLE}


  GetEmail:
    handler: src/lambda/http/getEmail.handler
    events:
      - http:
          method: get
          path: emails
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMAILS_TABLE}


  DeregisterEmail:
    handler: src/lambda/http/deregisterEmail.handler
    events:
      - http:
          method: delete
          path: emails
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:DeleteIdentity
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMAILS_TABLE}

  # ResizeImage:
  #   handler: src/lambda/s3/resizeImage.handler
  #   events:
  #     - sns:
  #         arn:
  #           Fn::Join:
  #             - ':'
  #             - - arn:aws:sns
  #               - Ref: AWS::Region
  #               - Ref: AWS::AccountId
  #               - ${self:custom.topicName}
  #         topicName: ${self:custom.topicName}


  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}


  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  # SyncWithElasticsearch:
  #   environment:
  #     ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
  #   handler: src/lambda/dynamoDb/elasticSearchSync.handler
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: !GetAtt ImagesDynamoDBTable.StreamArn

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: public
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GROUPS_ID_INDEX}
            KeySchema:
            - AttributeName: id
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.GROUPS_PUBLIC_INDEX}
            KeySchema:
            - AttributeName: public
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        # StreamSpecification:
        #   StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.IMAGES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
            - AttributeName: id
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    EmailsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EMAILS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      #DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref GroupUpdateTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:lamda:${opt:region, self:provider.region}::function:serverless-udagram-app*
        Topics:
          - !Ref GroupUpdateTopic

    # ThumbnailsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

    GroupUpdateTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Group update topic
        TopicName: ${self:custom.topicName}

    # ImagesSearch:
    #   Type: AWS::Elasticsearch::Domain
    #   Properties:
    #     ElasticsearchVersion: '6.3'
    #     DomainName: images-search-${self:provider.stage}
    #     ElasticsearchClusterConfig:
    #       DedicatedMasterEnabled: false
    #       InstanceCount: '1'
    #       ZoneAwarenessEnabled: false
    #       InstanceType: t2.small.elasticsearch
    #     EBSOptions:
    #       EBSEnabled: true
    #       Iops: 0
    #       VolumeSize: 10
    #       VolumeType: 'gp2'

    #     AccessPolicies:
    #       Version: '2012-10-17'
    #       Statement:
    #         -
    #           Effect: Allow
    #           Principal:
    #             AWS: '*'
    #           Action: 'es:*'
    #           Resource: '*'

    # KMSKey:
    #   Type: AWS::KMS::Key
    #   Properties:
    #     Description: KMS key to encrypt Auth0 secret
    #     KeyPolicy:
    #       Version: '2012-10-17'
    #       Id: key-default-1
    #       Statement:
    #         - Sid: Allow administration of the key
    #           Effect: Allow
    #           Principal:
    #             AWS:
    #               Fn::Join:
    #               - ':'
    #               - - 'arn:aws:iam:'
    #                 - Ref: AWS::AccountId
    #                 - 'root'
    #           Action:
    #             - 'kms:*'
    #           Resource: '*'

    # KMSKeyAlias:
    #   Type: AWS::KMS::Alias
    #   Properties:
    #     AliasName: alias/auth0Key-${self:provider.stage}
    #     TargetKeyId: !Ref KMSKey

    # Auth0Secret:
    #   Type: AWS::SecretsManager::Secret
    #   Properties:
    #     Name: ${self:provider.environment.AUTH_0_SECRET_ID}
    #     Description: Auth0 secret
    #     KmsKeyId: !Ref KMSKey